import React, { useState } from 'react';
import { MoreVertical, User, LogOut, Edit, Trash2, Eye } from 'lucide-react';

const FastAPIAdmin = () => {
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);
  const [isAddUserModalOpen, setIsAddUserModalOpen] = useState(false);
  const [activeActionMenu, setActiveActionMenu] = useState(null);
  const [activeTab, setActiveTab] = useState('myProfile');
  const [editingItem, setEditingItem] = useState(null);
  const [showSuccess, setShowSuccess] = useState(false);
  
  // Sample data
  const [users, setUsers] = useState([
    { id: 1, fullName: 'N/A', email: 'admin@example.com', role: 'Superuser', status: 'Active', isYou: true },
    { id: 2, fullName: 'User', email: 'user@example.com', role: 'User', status: 'Active', isYou: false },
    { id: 3, fullName: 'User2', email: 'user2@example.com', role: 'User', status: 'Inactive', isYou: false }
  ]);
  
  const [items, setItems] = useState([
    { id: 1, title: 'Item #1', description: 'Item description' },
    { id: 2, title: 'Item #2', description: 'Item description' }
  ]);

  const toggleUserMenu = () => {
    setIsUserMenuOpen(!isUserMenuOpen);
    if (isUserMenuOpen) setActiveActionMenu(null);
  };

  const toggleActionMenu = (id) => {
    setActiveActionMenu(activeActionMenu === id ? null : id);
    if (activeActionMenu !== id) setIsUserMenuOpen(false);
  };

  const handleAddUser = () => {
    setIsAddUserModalOpen(true);
    setEditingItem(null);
  };

  const handleAddItem = () => {
    setIsAddUserModalOpen(true);
    setEditingItem(null);
  };

  const handleEdit = (item) => {
    setEditingItem(item);
    setIsAddUserModalOpen(true);
    setActiveActionMenu(null);
  };

  const handleDelete = (id) => {
    // Implementation would go here
    setActiveActionMenu(null);
  };

  const handleCloseModal = () => {
    setIsAddUserModalOpen(false);
    setEditingItem(null);
  };

  const handleSave = () => {
    setIsAddUserModalOpen(false);
    setShowSuccess(true);
    setTimeout(() => {
      setShowSuccess(false);
    }, 3000);
  };

  const handleLogout = () => {
    // Logout implementation would go here
    setIsUserMenuOpen(false);
  };

  // Render different content based on current path
  const renderContent = () => {
    const currentPath = window.location.pathname;
    
    if (currentPath.includes('/admin')) {
      return (
        <div>
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold">User Management</h1>
          </div>
          
          <button onClick={handleAddUser} className="bg-teal-500 hover:bg-teal-600 text-white px-4 py-2 rounded flex items-center gap-2 mb-6">
            <span>+</span> Add User
          </button>
          
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left py-3 px-4">FULL NAME</th>
                  <th className="text-left py-3 px-4">EMAIL</th>
                  <th className="text-left py-3 px-4">ROLE</th>
                  <th className="text-left py-3 px-4">STATUS</th>
                  <th className="text-left py-3 px-4">ACTIONS</th>
                </tr>
              </thead>
              <tbody>
                {users.map(user => (
                  <tr key={user.id} className="border-b">
                    <td className="py-3 px-4 flex items-center gap-2">
                      {user.fullName} {user.isYou && <span className="bg-teal-100 text-teal-800 px-2 py-1 text-xs rounded">YOU</span>}
                    </td>
                    <td className="py-3 px-4">{user.email}</td>
                    <td className="py-3 px-4">{user.role}</td>
                    <td className="py-3 px-4">
                      <div className="flex items-center gap-2">
                        <span className={`w-2 h-2 rounded-full ${user.status === 'Active' ? 'bg-green-500' : 'bg-red-500'}`}></span>
                        {user.status}
                      </div>
                    </td>
                    <td className="py-3 px-4 relative">
                      <button onClick={() => toggleActionMenu(user.id)} className="hover:bg-gray-100 p-1 rounded">
                        <MoreVertical size={18} />
                      </button>
                      
                      {activeActionMenu === user.id && (
                        <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10 border">
                          <div className="py-1">
                            <button onClick={() => handleEdit(user)} className="flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                              <Edit size={16} className="mr-2" /> Edit
                            </button>
                            <button onClick={() => handleDelete(user.id)} className="flex w-full items-center px-4 py-2 text-sm text-red-600 hover:bg-gray-100">
                              <Trash2 size={16} className="mr-2" /> Delete
                            </button>
                          </div>
                        </div>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      );
    } else if (currentPath.includes('/items')) {
      return (
        <div>
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold">Items Management</h1>
          </div>
          
          <button onClick={handleAddItem} className="bg-teal-500 hover:bg-teal-600 text-white px-4 py-2 rounded flex items-center gap-2 mb-6">
            <span>+</span> Add Item
          </button>
          
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left py-3 px-4">ID</th>
                  <th className="text-left py-3 px-4">TITLE</th>
                  <th className="text-left py-3 px-4">DESCRIPTION</th>
                  <th className="text-left py-3 px-4">ACTIONS</th>
                </tr>
              </thead>
              <tbody>
                {items.map(item => (
                  <tr key={item.id} className="border-b">
                    <td className="py-3 px-4">{item.id}</td>
                    <td className="py-3 px-4">{item.title}</td>
                    <td className="py-3 px-4">{item.description}</td>
                    <td className="py-3 px-4 relative">
                      <button onClick={() => toggleActionMenu(`item-${item.id}`)} className="hover:bg-gray-100 p-1 rounded">
                        <MoreVertical size={18} />
                      </button>
                      
                      {activeActionMenu === `item-${item.id}` && (
                        <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10 border">
                          <div className="py-1">
                            <button onClick={() => handleEdit(item)} className="flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                              <Edit size={16} className="mr-2" /> Update
                            </button>
                            <button onClick={() => handleDelete(item.id)} className="flex w-full items-center px-4 py-2 text-sm text-red-600 hover:bg-gray-100">
                              <Trash2 size={16} className="mr-2" /> Delete
                            </button>
                          </div>
                        </div>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      );
    } else if (currentPath.includes('/settings')) {
      return (
        <div>
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold">User Settings</h1>
          </div>
          
          <div className="mb-6">
            <div className="flex border-b">
              <button 
                className={`py-2 px-4 ${activeTab === 'myProfile' ? 'border-b-2 border-teal-500 text-teal-500' : ''}`}
                onClick={() => setActiveTab('myProfile')}
              >
                My profile
              </button>
              <button 
                className={`py-2 px-4 ${activeTab === 'password' ? 'border-b-2 border-teal-500 text-teal-500' : ''}`}
                onClick={() => setActiveTab('password')}
              >
                Password
              </button>
              <button 
                className={`py-2 px-4 ${activeTab === 'appearance' ? 'border-b-2 border-teal-500 text-teal-500' : ''}`}
                onClick={() => setActiveTab('appearance')}
              >
                Appearance
              </button>
            </div>
          </div>
          
          <div className="max-w-2xl">
            <h2 className="text-lg font-semibold mb-4">User Information</h2>
            
            <div className="mb-4">
              <label className="block text-gray-700 mb-2" htmlFor="fullName">Full name</label>
              <input
                type="text"
                id="fullName"
                className="w-full px-3 py-2 border rounded"
                defaultValue="Admin"
              />
            </div>
            
            <div className="mb-4">
              <label className="block text-gray-700 mb-2" htmlFor="email">Email</label>
              <input
                type="email"
                id="email"
                className="w-full px-3 py-2 border rounded"
                defaultValue="admin@example.com"
              />
            </div>
            
            <div className="flex mt-6">
              <button 
                className="bg-teal-500 hover:bg-teal-600 text-white px-4 py-2 rounded mr-2"
                onClick={handleSave}
              >
                Save
              </button>
              <button className="bg-white hover:bg-gray-100 text-gray-700 border px-4 py-2 rounded">
                Cancel
              </button>
            </div>
          </div>
        </div>
      );
    } else {
      return (
        <div className="flex items-center justify-center h-full">
          <div className="bg-white p-8 rounded shadow-md w-96">
            <div className="flex justify-center mb-6">
              <div className="bg-teal-500 text-white rounded-full p-3">
                <User size={24} />
              </div>
            </div>
            <h1 className="text-2xl font-bold text-center mb-6">Login</h1>
            <div className="mb-4">
              <label className="block text-gray-700 mb-2" htmlFor="email">Email</label>
              <input
                type="email"
                id="email"
                className="w-full px-3 py-2 border rounded"
              />
            </div>
            <div className="mb-4">
              <label className="block text-gray-700 mb-2" htmlFor="password">Password</label>
              <input
                type="password"
                id="password"
                className="w-full px-3 py-2 border rounded"
              />
            </div>
            <button className="w-full bg-teal-500 hover:bg-teal-600 text-white px-4 py-2 rounded">
              Log In
            </button>
          </div>
        </div>
      );
    }
  };

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <div className="w-64 bg-white border-r">
        <div className="p-4 border-b">
          <div className="flex items-center text-teal-500 text-xl font-bold">
            <div className="mr-2 bg-teal-500 text-white p-1 rounded">⚡</div>
            FastAPI
          </div>
        </div>
        
        <nav className="p-4">
          <ul className="space-y-2">
            <li>
              <a href="#" className="flex items-center px-4 py-2 text-gray-700 rounded hover:bg-gray-100">
                <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path></svg>
                Dashboard
              </a>
            </li>
            <li>
              <a href="#" className="flex items-center px-4 py-2 text-gray-700 bg-gray-100 rounded">
                <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path></svg>
                Items
              </a>
            </li>
            <li>
              <a href="#" className="flex items-center px-4 py-2 text-gray-700 rounded hover:bg-gray-100">
                <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                User Settings
              </a>
            </li>
            <li>
              <a href="#" className="flex items-center px-4 py-2 text-gray-700 rounded hover:bg-gray-100">
                <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                Admin
              </a>
            </li>
          </ul>
        </nav>
        
        <div className="mt-auto p-4 text-sm text-gray-500 border-t">
          Logged in as:<br />
          admin@example.com
        </div>
      </div>
      
      {/* Main content */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <header className="bg-white border-b p-4 flex justify-between items-center">
          <div className="flex items-center">
            <button className="mr-2">
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
            </button>
            <button className="mr-2">
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 9l3 3m0 0l-3 3m3-3H8m13 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
            </button>
            <button>
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>
            </button>
          </div>
          
          <div className="relative">
            <button 
              onClick={toggleUserMenu}
              className="w-10 h-10 rounded-full bg-teal-500 text-white flex items-center justify-center"
            >
              <User size={20} />
            </button>
            
            {isUserMenuOpen && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10 border">
                <div className="py-1">
                  <a href="#" className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                    <User size={16} className="mr-2" /> Profile
                  </a>
                  <button 
                    onClick={handleLogout}
                    className="flex w-full items-center px-4 py-2 text-sm text-red-600 hover:bg-gray-100"
                  >
                    <LogOut size={16} className="mr-2" /> Logout
                  </button>
                </div>
              </div>
            )}
          </div>
        </header>
        
        {/* Page content */}
        <main className="flex-1 p-6 overflow-auto">
          {renderContent()}
        </main>
      </div>
      
      {/* Modal for adding/editing users */}
      {isAddUserModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
          <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold">{editingItem ? 'Edit' : 'Add'} {window.location.pathname.includes('/items') ? 'Item' : 'User'}</h2>
              <button onClick={handleCloseModal} className="text-gray-500 hover:text-gray-700">
                &times;
              </button>
            </div>
            
            {window.location.pathname.includes('/admin') ? (
              <div>
                <div className="mb-4">
                  <label className="block text-gray-700 mb-2">Email <span className="text-red-500">*</span></label>
                  <input
                    type="email"
                    className="w-full px-3 py-2 border rounded"
                    defaultValue={editingItem?.email || "user@example.com"}
                  />
                </div>
                
                <div className="mb-4">
                  <label className="block text-gray-700 mb-2">Full name</label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border rounded"
                    defaultValue={editingItem?.fullName || "User"}
                  />
                </div>
                
                <div className="mb-4">
                  <label className="block text-gray-700 mb-2">Set Password <span className="text-red-500">*</span></label>
                  <input
                    type="password"
                    className="w-full px-3 py-2 border rounded"
                    defaultValue="•••••••"
                  />
                </div>
                
                <div className="mb-4">
                  <label className="block text-gray-700 mb-2">Confirm Password <span className="text-red-500">*</span></label>
                  <input
                    type="password"
                    className="w-full px-3 py-2 border rounded"
                    defaultValue="•••••••"
                  />
                </div>
                
                <div className="flex items-center mb-4">
                  <input
                    type="checkbox"
                    id="isSuperuser"
                    className="mr-2"
                    defaultChecked={editingItem?.role === 'Superuser'}
                  />
                  <label htmlFor="isSuperuser">Is superuser?</label>
                </div>
                
                <div className="flex items-center mb-4">
                  <input
                    type="checkbox"
                    id="isActive"
                    className="mr-2"
                    defaultChecked={editingItem?.status === 'Active'}
                  />
                  <label htmlFor="isActive">Is active?</label>
                </div>
              </div>
            ) : (
              <div>
                <div className="mb-4">
                  <label className="block text-gray-700 mb-2">Title <span className="text-red-500">*</span></label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border rounded"
                    defaultValue={editingItem?.title || ""}
                  />
                </div>
                
                <div className="mb-4">
                  <label className="block text-gray-700 mb-2">Description</label>
                  <textarea
                    className="w-full px-3 py-2 border rounded"
                    defaultValue={editingItem?.description || ""}
                    rows={3}
                  />
                </div>
              </div>
            )}
            
            <div className="flex justify-end mt-6">
              <button
                onClick={handleSave}
                className="bg-teal-500 hover:bg-teal-600 text-white px-4 py-2 rounded mr-2"
              >
                Save
              </button>
              <button
                onClick={handleCloseModal}
                className="bg-white hover:bg-gray-100 text-gray-700 border px-4 py-2 rounded"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Success notification */}
      {showSuccess && (
        <div className="fixed bottom-4 right-4 bg-green-600 text-white p-4 rounded shadow-lg flex items-center z-50">
          <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path></svg>
          <div>
            <div className="font-bold">Success!</div>
            <div className="text-sm">{window.location.pathname.includes('/items') ? 'Item' : 'User'} {editingItem ? 'updated' : 'created'} successfully.</div>
          </div>
          <button onClick={() => setShowSuccess(false)} className="ml-4">×</button>
        </div>
      )}
    </div>
  );
};

export default FastAPIAdmin;