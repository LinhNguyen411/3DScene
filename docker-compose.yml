version: "3.8"

x-linux-container-environment:
  &common-linux-container-environment-variables
  TZ: ${TZ}
  APP_UID: ${APP_UID:-1000}
  APP_GID: ${APP_GID:-1000}

x-fastapi-app-environment:
  &common-fastapi-app-environment-variables
  TZ: ${TZ}
  APP_UID: ${APP_UID:-1000}
  APP_GID: ${APP_GID:-1000}
  API_PORT: ${API_PORT}
  API_PORT_INTERNAL: ${API_PORT_INTERNAL}
  POSTGRES_HOST: 3dscene-postgres  # Ensure this is explicitly set
  POSTGRES_PORT: 5432  # Default PostgreSQL port
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_DB: ${POSTGRES_DB}
  SECRET_KEY: ${SECRET_KEY}
  PROJECT_NAME: ${PROJECT_NAME}
  SERVER_HOST_FRONT: ${SERVER_HOST_FRONT}
  FIRST_SUPERUSER_EMAIL: ${FIRST_SUPERUSER_EMAIL}
  FIRST_SUPERUSER_FIRST_NAME: ${FIRST_SUPERUSER_FIRST_NAME}
  FIRST_SUPERUSER_LAST_NAME: ${FIRST_SUPERUSER_LAST_NAME}
  FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD}
  SMTP_USER: ${SMTP_USER}
  SMTP_PASSWORD: ${SMTP_PASSWORD}
  EMAILS_FROM_EMAIL: ${EMAILS_FROM_EMAIL}
  SMTP_PORT: ${SMTP_PORT}
  SMTP_HOST: ${SMTP_HOST}
  EMAILS_FROM_NAME: ${EMAILS_FROM_NAME}
  MAIL_TLS: ${MAIL_TLS}
  CELERY_BROKER_URL: redis://3dscene-redis:6379/0
  CELERY_RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@3dscene-postgres:5432/${POSTGRES_DB}
  GOOGLE_AUTH_CLIENT_ID: ${GOOGLE_AUTH_CLIENT_ID}
  GOOGLE_AUTH_CLIENT_SECRET: ${GOOGLE_AUTH_CLIENT_SECRET}

services:
  3dscene-frontend:
    image: "3dscene-frontend:latest"
    depends_on:
      - 3dscene-api
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT_INTERNAL}
    environment:
      <<: *common-linux-container-environment-variables
      CHOKIDAR_USEPOLLING: "true"
      REACT_APP_ENVIRONMENT: ${REACT_APP_ENVIRONMENT}
      REACT_APP_GOOGLE_AUTH_CLIENT_ID: ${GOOGLE_AUTH_CLIENT_ID}
      FRONTEND_PORT_INTERNAL: ${FRONTEND_PORT_INTERNAL}
    stdin_open: true
    restart: unless-stopped

  3dscene-api:
    image: "3dscene-api:latest"
    ports:
      - ${API_PORT}:${API_PORT_INTERNAL}
    environment:
      <<: *common-fastapi-app-environment-variables
      STRIPE_API_KEY: ${STRIPE_API_KEY}
    command: uvicorn main:app --reload --proxy-headers --host 0.0.0.0 --port 8000
    depends_on:
      3dscene-postgres:
        condition: service_healthy  # Wait for PostgreSQL to be ready
    restart: unless-stopped

  3dscene-reverse-proxy:
    image: "3dscene-reverse-proxy:latest"
    depends_on:
      - 3dscene-api
      - 3dscene-frontend
    ports:
      - ${REVERSE_PROXY_PORT}:80
    environment:
      <<: *common-linux-container-environment-variables
      API_PORT_INTERNAL: ${API_PORT_INTERNAL}
      FRONTEND_PORT_INTERNAL: ${FRONTEND_PORT_INTERNAL}
      MAILHOG_PORT_INTERNAL: ${MAILHOG_PORT_INTERNAL}
      FLOWER_PORT_INTERNAL: ${FLOWER_PORT_INTERNAL}
    restart: unless-stopped

  3dscene-mailhog:
    image: "mailhog/mailhog:v1.0.1"
    ports:
      - ${MAILHOG_PORT}:${MAILHOG_PORT_INTERNAL}
    environment:
      <<: *common-linux-container-environment-variables
    restart: unless-stopped

  3dscene-worker:
    image: "3dscene-api:latest"
    volumes:
      - ./backend/app/uploads:/code/app/uploads
      - ./backend/app/results:/code/app/results
    environment:
      <<: *common-fastapi-app-environment-variables
    restart: unless-stopped
    command: >-
      celery --app app.celery.celery_app:celery_app worker --loglevel=info --uid=root --gid=nogroup
    depends_on:
      - 3dscene-api
      - 3dscene-redis
      - 3dscene-postgres  # Add this if the worker also needs the DB

  3dscene-redis:
    image: redis:6-alpine

  3dscene-flower:
    ports:
      - ${FLOWER_PORT}:${FLOWER_PORT_INTERNAL}
    environment:
      - CELERY_BROKER_URL=redis://3dscene-redis:${REDIS_PORT_INTERNAL}/0
    depends_on:
      - 3dscene-api
      - 3dscene-redis
      - 3dscene-worker
    command: celery --broker=redis://3dscene-redis:${REDIS_PORT_INTERNAL}/0 flower --port=${FLOWER_PORT_INTERNAL} --url_prefix=flower
    restart: unless-stopped

  3dscene-postgres:
    image: "postgres:14.5-alpine"
    environment:
      <<: *common-linux-container-environment-variables
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - 3dscene-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  3dscene-pgadmin:
    image: "dpage/pgadmin4:5.3"
    depends_on:
      - 3dscene-postgres
    ports:
      - ${PGADMIN_PORT}:80
    environment:
      <<: *common-linux-container-environment-variables
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_DEFAULT_PASSWORD_FILE: ${PGADMIN_DEFAULT_PASSWORD_FILE}
      GUNICORN_ACCESS_LOGFILE: /dev/null
    restart: unless-stopped
  
  3dscene-stripe-cli:
    image: stripe/stripe-cli:latest
    environment:
      <<: *common-linux-container-environment-variables
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_DEVICE_NAME: ${STRIPE_DEVICE_NAME}
    command:
      listen --forward-to http://3dscene-api:${API_PORT_INTERNAL}/api/v1/stripe/webhook
    depends_on:
      - 3dscene-api
    restart: unless-stopped

volumes:
  3dscene-postgres-data:
    name: ${POSTGRES_STORAGE_VOLUME_NAME}
